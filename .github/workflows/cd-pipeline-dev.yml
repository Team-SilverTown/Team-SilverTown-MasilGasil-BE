name: Deploy dev API to Amazon ECS

on:
  push:
    branches: [ "dev" ]

permissions:
  contents: read

env:
  AWS_REGION: ap-northeast-2
  CONTAINER_NAME: masilgasil-ecs-container
  ECR_REPOSITORY: masilgasil-ecr-private
  ECS_CLUSTER: masilgasil-ecs-cluster
  ECS_SERVICE: masilgasil-ecs-service-dev
  ECS_TASK_DEFINITION: .aws/masilgasil-ecs-task-revision1.json
  ACTIVE_PROFILE: dev
  SERVER_PORT: 8080

jobs:
  job:
    name: Deploy dev API
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: 체크 아웃
        uses: actions/checkout@v3

      - name: JDK 17 설치
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: AWS credentials 설정
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: application.yml 오버라이드
        uses: microsoft/variable-substitution@v1
        with:
          files: ./src/main/resources/application.yml
        env:
          server.port: ${{ env.SERVER_PORT }}
          cors.service-origin: ${{ secrets.SERVICE_ORIGIN }}

          spring.datasource.username: ${{ secrets.MYSQL_USERNAME }}
          spring.datasource.password: ${{ secrets.MYSQL_PASSWORD }}
          spring.datasource.url: ${{ secrets.MYSQL_URL }}

          spring.cloud.aws.credentials.accessKey: ${{ secrets.AWS_ACCESS_KEY_ID }}
          spring.cloud.aws.credentials.secretKey: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          spring.cloud.aws.region.static: ${{ env.AWS_REGION }}
          spring.cloud.aws.s3.bucket: ${{ secrets.AWS_S3_IMAGE_BUCKET }}
          spring.cloud.aws.s3.endpoint: ${{ secrets.AWS_S3_IMAGE_ENDPOINT }}

          jwt.issuer: ${{ secrets.TOKEN_ISSUER }}
          jwt.base64-secret: ${{ secrets.TOKEN_SECRET }}
          jwt.token-validity-in-seconds: ${{ secrets.TOKEN_EXPIRATION }}

      - name: 프로젝트 빌드
        uses: gradle/gradle-build-action@v3.1.0
        with:
          arguments: clean build
        env:
          SPRING_PROFILES_ACTIVE: ${{ env.ACTIVE_PROFILE }}

      - name: Amazon ECR 로그인
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: docker 이미지 업로드
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: latest
          PROFILE: ${{ env.ACTIVE_PROFILE }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --build-arg PROFILE=$PROFILE .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Amazon ECS task definition 이미지 설정
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Amazon ECS task definition 배포
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
